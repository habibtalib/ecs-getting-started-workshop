AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 key pair to enable SSH access to the ECS
      instances.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a default VPC ID.
  SubnetID:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select a default subnet ID in your selected VPC.
  # DesiredCapacity:
  #   Type: Number
  #   Default: '1'
  # MaxSize:
  #   Type: Number
  #   Default: '1'
  #   Description: Maximum number of instances that can be launched in your ECS cluster.
  # InstanceType:
  #   Description: EC2 instance type
  #   Type: String
  #   Default: t2.micro
  #   AllowedValues:
  #     - t2.micro
  #     - t2.small
  #     - t2.medium
  #     - t2.large
  #     - m3.medium
  #     - m3.large
  #     - m3.xlarge
  #     - m3.2xlarge
  #     - m4.large
  #     - m4.xlarge
  #     - m4.2xlarge
  #     - m4.4xlarge
  #     - m4.10xlarge
  #     - c4.large
  #     - c4.xlarge
  #     - c4.2xlarge
  #     - c4.4xlarge
  #     - c4.8xlarge
  #     - c3.large
  #     - c3.xlarge
  #     - c3.2xlarge
  #     - c3.4xlarge
  #     - c3.8xlarge
  #     - r3.large
  #     - r3.xlarge
  #     - r3.2xlarge
  #     - r3.4xlarge
  #     - r3.8xlarge
  #     - i2.xlarge
  #     - i2.2xlarge
  #     - i2.4xlarge
  #     - i2.8xlarge
  #     - i3.xlarge
  #     - i3.2xlarge
  #     - i3.4xlarge
  #     - i3.8xlarge
  #     - i3.16xlarge
    ConstraintDescription: Please choose a valid instance type.
Mappings:
  AWSRegionToAMI:
    us-west-2:
      AMIID: ami-6df1e514
Resources:
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'

  ingress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  ingress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0


  # CloudwatchLogsGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
  #     RetentionInDays: 14



  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'SubnetID'
      LaunchConfigurationName: !Ref Ec2Instance
      MinSize: 0
      MaxSize: 1
      # MaxSize: !Ref 'MaxSize'
      # DesiredCapacity: !Ref 'DesiredCapacity'
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      Tags:
        - 
          Key: Name
          Value: !Sub
            - "${StackName}-docker"
            - StackName: !Ref AWS::StackName
          PropagateAtLaunch: true
        # - 
        #   Key: ECS_CLUSTER
        #   Value: !Sub ${AWS::StackName}-ecs-cluster
        #   PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'


  Ec2Instance:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups:
        - !Ref 'Ec2SecurityGroup'
      SpotPrice: 0.015
      # InstanceType: !Ref 'InstanceType'
      InstanceType: m3.medium
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref 'KeyName'
      # BlockDeviceMappings:
      #   - DeviceName: /dev/sda1
      #     Ebs:
      #       VolumeSize: '100'
      #       VolumeType: gp2
      AssociatePublicIpAddress: 'true'
      UserData: 
        "Fn::Base64": 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y aws-cfn-bootstrap
            # echo ECS_CLUSTER=${AWS::StackName}-ecs-cluster >> /etc/ecs/ecs.config
            # # /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r ASGLC --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2AutoScalingGroup --region ${AWS::Region} 

  EC2RoleForECR:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecr-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*
                Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2RoleForECR

# Outputs:
  # ecsservice:
  #   Value: !Ref 'service'
  # ecscluster:
  #   Value: !Ref 'ECSCluster'
  # ECSALB:
  #   Description: Your ALB DNS URL
  #   Value: !Join ['', [!GetAtt 'ECSALB.DNSName']]
  # taskdef:
  #   Value: !Ref 'taskdefinition'
